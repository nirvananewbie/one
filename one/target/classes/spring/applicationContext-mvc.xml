<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd 
            http://www.springframework.org/schema/cache 
            http://www.springframework.org/schema/cache/spring-cache.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
	default-lazy-init="true">
	<aop:config />
	<!--注解说明 -->
	<context:annotation-config />
	<!-- 把标记了@Controller注解的类转换为bean -->
	<context:component-scan base-package="com.xs.one" />
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<mvc:resources mapping="/static/**" location="/static/"/>
	<mvc:resources mapping="/resources/**/" location="/resources/"/>
	
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="false" />
	</bean>
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
	<!-- 将多个配置文件位置放到列表中 -->
	<!--<bean id="propertyResources" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				&lt;!&ndash; 这里支持多种寻址方式：classpath和file &ndash;&gt;
				<value>classpath:redis.properties</value>
				&lt;!&ndash; 推荐使用file的方式引入，这样可以将配置和代码分离 &ndash;&gt;
				&lt;!&ndash;<value>file:/opt/demo/config/demo-mq.properties</value>
				<value>file:/opt/demo/config/demo-remote.properties</value>&ndash;&gt;
			</list>
		</constructor-arg>
	</bean>

	&lt;!&ndash; 将配置文件读取到容器中，交给Spring管理 &ndash;&gt;
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" ref="propertyResources" />
	</bean>-->

	<!-- JSP视图文件解析配置 -->
<!-- 	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">   -->
<!--         <property name="prefix" value="/WEB-INF/view/" />   -->
<!--         <property name="suffix" value=".jsp" /> -->
<!--     </bean> -->
    
    <!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/page/index" />

	<!-- zkclient org.I0Itec.zkclient.ZkClient-->
	<bean id="zkClient" class="org.I0Itec.zkclient.ZkClient">
		<constructor-arg name="serverstring" value="10.20.16.74:2181"/>
	</bean>
	<!-- jedis 单线程-->
	<bean id="jedis" class="redis.clients.jedis.Jedis">
		<constructor-arg name="host" value="${redis.host}"/>
		<constructor-arg name="port" value="${redis.port}"/>
	</bean>
	<!-- jedis-pool 多线程-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}"/>
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
		<property name="testOnBorrow" value="true"/>
		<property name="testOnReturn" value="true"/>
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig"/>
		<constructor-arg index="1" value="${redis.hostname}" />
		<constructor-arg index="2" value="${redis.port}" />
	</bean>
</beans>